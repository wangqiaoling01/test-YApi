/**
 * unknown
 * unknown
 *
 * OpenAPI spec version: last
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import ajax, { AjaxPromise, ExtraFetchParams } from '@ekit/ajax';
import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering object-literal-shorthand */

/**
  * @description apiAddBookPost参数
  * @property `name` 图书名称
  * @property `author` 图书作者
  */
export interface ParamsapiAddBookPost {
  // formParams
  /**
   * 图书名称
   */
  name: any;
  /**
   * 图书作者
   */
  author: any;
}
/**
  * @description apiBookGet参数
  * @property `[name]` 图书名称
  * @property `[author]` 图书作者
  * @property `[id]` 图书ID
  */
export interface ParamsapiBookGet {
  // queryParams
  /**
   * 图书名称
   */
  name?: string;
  /**
   * 图书作者
   */
  author?: string;
  /**
   * 图书ID
   */
  id?: string;
}
/**
  * @description apiDelBookPost参数
  * @property `id` 图书ID
  */
export interface ParamsapiDelBookPost {
  // formParams
  /**
   * 图书ID
   */
  id: any;
}
/**
  * @description apiEditBookPost参数
  * @property `id` 图书ID
  * @property `name` 
  * @property `author` 
  */
export interface ParamsapiEditBookPost {
  // formParams
  /**
   * 图书ID
   */
  id: any;
  /**
   * 
   */
  name: any;
  /**
   * 
   */
  author: any;
}

export class BooksApi {
  protected $basePath = ''.replace(/\/$/, '');

  public constructor(basePath?: string) {
    if (basePath !== undefined) {
      this.$basePath = basePath.replace(/\/$/, '');
    }
  }

  /**
   * 
   * @summary 新增图书
   * @param params ParamsapiAddBookPost
   
   * @param opt ajax config
   * @returns models.ApiEditBook
   */
  public apiAddBookPost = (
    params: ParamsapiAddBookPost,
    opt?: ExtraFetchParams
  ) : AjaxPromise<models.ApiEditBook>  => {
    const path = '/api/addBook';
    const url = this.$basePath + path;
    const p: any = {};
    p.form = {};
    if ('name' in params) p.form.name = params.name;
    ajax.check(params.name, 'name');
    if ('author' in params) p.form.author = params.author;
    ajax.check(params.author, 'author');
    return ajax.ajax({
      ...opt,
      method: 'POST',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 获取图书列表
   * @param params ParamsapiBookGet
   
   * @param opt ajax config
   * @returns models.ApiBook
   */
  public apiBookGet = (
    params: ParamsapiBookGet,
    opt?: ExtraFetchParams
  ) : AjaxPromise<models.ApiBook>  => {
    const path = '/api/book';
    const url = this.$basePath + path;
    const p: any = {};
    p.query = {};
    if ('name' in params) p.query.name = params.name;
    if ('author' in params) p.query.author = params.author;
    if ('id' in params) p.query.id = params.id;
    return ajax.ajax({
      ...opt,
      method: 'GET',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 删除图书
   * @param params ParamsapiDelBookPost
   
   * @param opt ajax config
   * @returns models.ApiEditBook
   */
  public apiDelBookPost = (
    params: ParamsapiDelBookPost,
    opt?: ExtraFetchParams
  ) : AjaxPromise<models.ApiEditBook>  => {
    const path = '/api/delBook';
    const url = this.$basePath + path;
    const p: any = {};
    p.form = {};
    if ('id' in params) p.form.id = params.id;
    ajax.check(params.id, 'id');
    return ajax.ajax({
      ...opt,
      method: 'POST',
      url,
      ...p
    });
  }
  /**
   * 
   * @summary 修改图书
   * @param params ParamsapiEditBookPost
   
   * @param opt ajax config
   * @returns models.ApiEditBook
   */
  public apiEditBookPost = (
    params: ParamsapiEditBookPost,
    opt?: ExtraFetchParams
  ) : AjaxPromise<models.ApiEditBook>  => {
    const path = '/api/editBook';
    const url = this.$basePath + path;
    const p: any = {};
    p.form = {};
    if ('id' in params) p.form.id = params.id;
    ajax.check(params.id, 'id');
    if ('name' in params) p.form.name = params.name;
    ajax.check(params.name, 'name');
    if ('author' in params) p.form.author = params.author;
    ajax.check(params.author, 'author');
    return ajax.ajax({
      ...opt,
      method: 'POST',
      url,
      ...p
    });
  }
}

export default new BooksApi();